apply plugin: 'com.android.library'
apply plugin: 'idea'

android {
  compileSdkVersion 23
  buildToolsVersion "22.0.1"

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 23
  }
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.3.0'
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.android.support:appcompat-v7:23.0.1'

  compile('com.squareup.retrofit:retrofit:2.0.0-beta1') {
    transitive = true
  }
  compile('com.squareup.retrofit:converter-gson:2.0.0-beta1') {
    transitive = true
  }
  compile('com.squareup.okhttp:okhttp:2.5.0') {
    transitive = true
  }
}

android.libraryVariants.all { variant ->
  task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
    description "Generates Javadoc for $variant.name."
    source = variant.javaCompile.source
    destinationDir = file("./javadoc/")
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

    options {
      links("http://docs.oracle.com/javase/7/docs/api/",
          "http://d.android.com/reference/",
          "http://square.github.io/retrofit/javadoc/");
      linksOffline("http://developer.android.com/reference",
          "${android.sdkDirectory}/docs/reference");
    }

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
  }
}

android.libraryVariants.all { variant ->
  variant.outputs.each { output ->
    def outputFile = output.outputFile
    if (outputFile != null && outputFile.name.endsWith('.aar')) {
      def fileName = "${BASE_NAME}-${VERSION_NAME}.aar"
      output.outputFile = new File(outputFile.parent, fileName)
    }
  }
}
